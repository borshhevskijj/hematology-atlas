{"version":3,"file":"static/js/570.3b0595bd.chunk.js","mappings":"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","sources":["webpack://view/./src/views/accordion/carousel.module.css?738d","views/accordion/CarouselImage.tsx","views/accordion/Carousel.jsx","webpack://view/./src/components/displayCells.module.css?97f5","components/DisplayCells.tsx","webpack://view/./src/components/errors/pageNotFound/pageNotFound.module.css?931d","webpack://view/./src/components/button/button.module.css?a294","components/button/Button.tsx","components/errors/pageNotFound/PageNotFound.tsx","webpack://view/./src/views/search/searchPage.module.css?006f","views/search/SearchPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"carousel\":\"carousel_carousel__U2poP\",\"loading\":\"carousel_loading__AJDn7\",\"shine\":\"carousel_shine__YujGC\",\"loaded\":\"carousel_loaded__+j2xg\"};","import React, { useState } from \"react\";\r\nimport cl from \"./carousel.module.css\";\r\ntype Props = {\r\n  image: string;\r\n  cellName: string;\r\n};\r\nconst CarouselImage: React.FC<Props> = ({ image, cellName }) => {\r\n  const [isImgLoaded, setImgLoaded] = useState(false);\r\n  return (\r\n    <img\r\n      loading=\"lazy\"\r\n      onLoad={() => setImgLoaded(true)}\r\n      className={!isImgLoaded ? cl.loading : cl.loaded}\r\n      src={image}\r\n      alt={cellName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CarouselImage;\r\n","import React,{useState} from 'react';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport {Navigation, Pagination} from 'swiper'\r\nimport 'swiper/css';\r\nimport 'swiper/css/navigation';\r\nimport 'swiper/css/pagination';\r\nimport CarouselImage from './CarouselImage';\r\nimport cl from \"./carousel.module.css\";\r\n\r\nconst Carousel = ({imagesArr,cellName}) => {\r\n    return (\r\n      <Swiper\r\n      modules={[Navigation, Pagination]}\r\n      navigation\r\n      pagination={{type:'progressbar'}}\r\n      spaceBetween={20}\r\n      slidesPerView={1}\r\n      breakpoints={{\r\n      450:{slidesPerView:2} ,\r\n      800:{slidesPerView:3}\r\n    }}\r\n      className={cl.carousel}\r\n      >\r\n\r\n     {imagesArr&& Object.keys(imagesArr) && imagesArr.map(image =>{\r\n        return(\r\n          <SwiperSlide key={image}>\r\n              <CarouselImage key={image} image ={image} cellName={cellName} />\r\n          </SwiperSlide>\r\n        )\r\n      })}\r\n    </Swiper>\r\n     \r\n  \r\n  );\r\n};\r\n\r\nexport default Carousel;","// extracted by mini-css-extract-plugin\nexport default {\"cellDescription\":\"displayCells_cellDescription__0OPv0\"};","import { Props } from \"../views/accordion/Accordion\";\r\nimport Carousel from \"../views/accordion/Carousel\";\r\nimport cl from \"./displayCells.module.css\";\r\nconst DisplayCells: React.FC<Props> = ({ data }) => {\r\n  return (\r\n    <>\r\n      <ul className={cl.cellDescription} key={data.id}>\r\n        <li>Морфология: {data.morphology}</li>\r\n        <li>Функции: {data.functions}</li>\r\n        <li>Маркеры: {data.markers}</li>\r\n        <li>Количество: {data.quantity}</li>\r\n        <li>Болезни: {data.diseases}</li>\r\n        <li>\r\n          <Carousel imagesArr={data.img} cellName={data.name} />\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DisplayCells;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"pageNotFound_wrapper__RbPRq\",\"content\":\"pageNotFound_content__VUUWf\",\"left\":\"pageNotFound_left__07Hm4\",\"right\":\"pageNotFound_right__i4SSL\",\"children\":\"pageNotFound_children__-Lxgy\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__lSKBM\"};","import React from \"react\";\r\nimport cl from \"./button.module.css\";\r\ntype ButtonProps = {\r\n  children: string | React.ReactNode;\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button: React.FC<ButtonProps> = ({ children, ...props }) => {\r\n  return (\r\n    <button className={cl.btn} {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport cl from \"./pageNotFound.module.css\";\r\nimport img from \"../../../assets/aboutBloodCells/descriptionImg1.png\";\r\nimport { error } from \"../../../views/search/SearchPage\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"../../button/Button\";\r\n\r\nconst PageNotFound: React.FC<error> = ({ errorMessage, responseStatus }) => {\r\n  const navigate = useNavigate();\r\n  const responseStatusChars = responseStatus.toString().split(\"\");\r\n  return (\r\n    <div className={cl.wrapper}>\r\n      <div className={cl.content}>\r\n        <span className={cl.left}>{responseStatusChars[0]}</span>\r\n        <span>\r\n          <img src={img} alt=\"error\" />\r\n        </span>\r\n        <span className={cl.right}>{responseStatusChars[2]}</span>\r\n      </div>\r\n      <div className={cl.children}>\r\n        <span>{errorMessage}</span>\r\n        <span> ошибка: {responseStatus}</span>\r\n      </div>\r\n      <Button children={\"на главную\"} onClick={() => navigate(\"/\")} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchPage\":\"searchPage_searchPage__6M3zB\"};","import React, { useState, useEffect } from \"react\";\r\nimport { Input } from \"./Input\";\r\nimport { IBloodCell } from \"../Hematopoiesis/HematopoiesisType\";\r\nimport Accordion from \"../accordion/Accordion\";\r\nimport DisplayCells from \"../../components/DisplayCells\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport cl from \"./searchPage.module.css\";\r\nimport PageNotFound from \"../../components/errors/pageNotFound/PageNotFound\";\r\nimport Spinner from \"../../components/spinner/Spinner\";\r\n\r\nexport type error = {\r\n  responseStatus: number;\r\n  errorMessage: string;\r\n};\r\n\r\nconst SearchPage = () => {\r\n  const { name } = useParams();\r\n  const [data, setData] = useState<IBloodCell>();\r\n\r\n  const [err, setError] = useState<error | null>(null);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const getData = async () => {\r\n    if (!name) {\r\n      return;\r\n    }\r\n    try {\r\n      let timerId = setTimeout(() => {\r\n        setLoading(true);\r\n      }, 350);\r\n\r\n      const fetching = await fetch(`http://localhost:5000/search/${name}`);\r\n\r\n      if (fetching.ok) {\r\n        const data = await fetching.json();\r\n        setData(data);\r\n        setError(null);\r\n        setLoading(false);\r\n        clearTimeout(timerId);\r\n      }\r\n      if (!fetching.ok) {\r\n        setData(undefined);\r\n        setLoading(false);\r\n        clearTimeout(timerId);\r\n        setError({\r\n          responseStatus: fetching.status,\r\n          errorMessage: \"Такой клетки не существует!\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      setError({\r\n        responseStatus: 500,\r\n        errorMessage: \"Произошла ошибка при выполнении запроса!\",\r\n      });\r\n      setData(undefined);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    name && sessionStorage.setItem(\"CellName\", name);\r\n  }, [name]);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n  if (err) {\r\n    return <PageNotFound errorMessage={err.errorMessage} responseStatus={err.responseStatus} />;\r\n  }\r\n\r\n  return (\r\n    <section className={`${cl.searchPage} container`}>\r\n      {data && Object.keys(data).length && (\r\n        <>\r\n          <h2>{data.name}</h2>\r\n          <DisplayCells data={data} />\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n"],"names":["_ref","image","cellName","_useState","useState","_useState2","_slicedToArray","isImgLoaded","setImgLoaded","_jsx","loading","onLoad","className","cl","src","alt","imagesArr","Swiper","modules","Navigation","Pagination","navigation","pagination","type","spaceBetween","slidesPerView","breakpoints","children","Object","keys","map","SwiperSlide","CarouselImage","data","_Fragment","_jsxs","morphology","functions","markers","quantity","diseases","Carousel","img","name","id","props","_objectWithoutProperties","_excluded","_objectSpread","errorMessage","responseStatus","navigate","useNavigate","responseStatusChars","toString","split","Button","onClick","useParams","setData","_useState3","_useState4","err","setError","_useState5","_useState6","isLoading","setLoading","getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","timerId","fetching","_data","wrap","_context","prev","next","abrupt","setTimeout","fetch","concat","sent","ok","json","clearTimeout","undefined","status","t0","stop","apply","arguments","useEffect","sessionStorage","setItem","Spinner","PageNotFound","length","DisplayCells"],"sourceRoot":""}